/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package automation

import DockerImageValidationException
import automation.common.constants.ValidationConstants
import automation.docker.validation.ImageValidationUtils
import kotlinx.cli.ArgParser
import kotlinx.cli.ArgType
import kotlinx.cli.Subcommand
import kotlinx.cli.vararg
import java.lang.IllegalArgumentException


fun main(args: Array<String>) {

    class ValidateImage: Subcommand("validate", "Validate Docker Image") {
        val imageNames by argument(ArgType.String, description = "Images").vararg()
        var validated: Boolean = false

        override fun execute() {
            if (imageNames.size > 2) {
                throw IllegalArgumentException("Too much image names")
            }
            val imageName = imageNames[0]
            val previousImageName = if (imageNames.size > 1) imageNames[1] else ""
            validated = ImageValidationUtils.validateSize(imageName, previousImageName)
            if (!validated) {
                throw DockerImageValidationException("Image $imageName size compared to previous ($previousImageName) " +
                        "suppresses ${ValidationConstants.ALLOWED_IMAGE_SIZE_INCREASE_THRESHOLD_PERCENT}% threshold.")
            }
        }
    }

    val parser = ArgParser("automation")

    val imageValidation = ValidateImage()
    parser.subcommands(imageValidation)

    parser.parse(args)
}