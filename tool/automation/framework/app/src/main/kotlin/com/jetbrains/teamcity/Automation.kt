/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.jetbrains.teamcity

import com.jetbrains.teamcity.common.MathUtils
import java.lang.IllegalArgumentException
import com.jetbrains.teamcity.common.constants.ValidationConstants
import com.jetbrains.teamcity.docker.DockerImage
import com.jetbrains.teamcity.docker.exceptions.DockerImageValidationException
import com.jetbrains.teamcity.docker.hub.DockerRegistryAccessor
import com.jetbrains.teamcity.docker.hub.data.DockerhubImage
import com.jetbrains.teamcity.docker.validation.DockerImageValidationUtilities
import com.jetbrains.teamcity.teamcity.TeamCityUtils
import kotlinx.cli.*
import java.lang.IllegalStateException


/**
 * Subcommand for image validation. Will be consumed by ..
 * ... argument parser.
 */
@OptIn(ExperimentalCli::class)
class ValidateImage: Subcommand("validate", "Validate Docker Image") {
    private val imageNames by argument(ArgType.String, description = "Images").vararg()

    /**
     * Execute image validation option specified via CLI.
     */
    override fun execute() {
        if (imageNames.size > 2) {
            throw IllegalArgumentException("Too many image names")
        }

        // 1. Capture current image size
        val originalImageName = imageNames[0]

        val percentageChangeThreshold = ValidationConstants.ALLOWED_IMAGE_SIZE_INCREASE_THRESHOLD_PERCENT
        var imagesFailedValidation = DockerImageValidationUtilities.validateImageSize(originalImageName,
            "https://hub.docker.com/v2",
            percentageChangeThreshold)

        if (!imagesFailedValidation.isEmpty()) {
            imagesFailedValidation.forEach {
                println("Validation failed for ${originalImageName}, OS: ${it.os}, OS version: ${it.osVersion}, architecture: ${it.architecture}")
            }
            // throw exception in order to handle it within upstream DSL
            throw DockerImageValidationException("Validation had failed for ${originalImageName}")
        }


    }
}

class PrintImageSize: Subcommand("get-size-trend", "Print out sizes of given image.") {
    private val imageName by argument(ArgType.String, description = "Image").vararg()

    override fun execute() {
        val image = imageName[0]
        val registryUri = "https://hub.docker.com/v2"
        DockerImageValidationUtilities.printImageSizes(image, registryUri)
    }
}

@OptIn(ExperimentalCli::class)
fun main(args: Array<String>) {

    val parser = ArgParser("automation")
    // -- add subcommands
    parser.subcommands(ValidateImage())
    parser.subcommands(PrintImageSize())

    // Splitting arguments into a list as the "--args" options might be treated as a ...
    // ... single string in non-interactive terminals, thus the parsing could be done incorrectly. ...
    // ... "\\s" is used to also cover non-unicode whitespaces.
    val argsList: Array<String> = if (args.size > 1) args else args[0].split("\\s+".toRegex()).toTypedArray()
    parser.parse(argsList)
}
